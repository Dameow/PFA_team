# 1. 引用包
from sklearn.cluster import KMeans
from sklearn import preprocessing
import pandas as pd
import numpy as np
# 2. 数据加载
data = pd.read_csv('./car_data_practice.csv', encoding='gbk')#如果出现中文文字，data = pd.read_csv('filename.csv', encoding='gbk')
 # ./表示目前所在目录
train_x = data[["人均GDP","城镇人口比重","交通工具消费价格指数","百户拥有汽车量"]]
print(train_x)

# 3 .LabelEncoder:将male,female转化为0，1
# 如果存在非数值类型,就必须要使用LabelEncoder
# from sklearn.preprocessing import LabelEncoder #LabelEncoder不需要，这张表都是数值
# le = LabelEncoder()
# train_x['Gender'] = le.fit_transform(train_x['Gender']) #fit_transform()函数
#  print(train_x['Gender'])

# 4. 都规范化到 [0,1] 空间
min_max_scaler=preprocessing.MinMaxScaler()
# 注意：min_max_scaler是每一列分别做
train_x=min_max_scaler.fit_transform(train_x)
#pd.DataFrame(train_x).to_csv('temp.csv', index=False)
#print(train_x)
 

### 5. 使用KMeans聚类：
kmeans = KMeans(n_clusters=5) 
kmeans.fit(train_x) #fit= 训练
predict_y = kmeans.predict(train_x) #预测

# 6. 合并聚类结果，插入到原数据中
result = pd.concat((data,pd.DataFrame(predict_y)),axis=1) #pd.concat——pandas数据合并与重塑
#axis=1是什么意思？
result.rename({0:u'聚类结果'},axis=1,inplace=True)
print(result)
# 7. 将结果导出到CSV文件中
result.to_csv("car_cluster_result_practice.csv",index=False,encoding='utf-8-sig') #encoding='utf-8'避免乱码
 

# K-Means 手肘法：统计不同K取值时，分成k簇数据的误差平方和，用于判断K取多少比较合适
import matplotlib.pyplot as plt
sse = []
for k in range(1, 11):
	# kmeans算法
	kmeans = KMeans(n_clusters=k)
	kmeans.fit(train_x)
	# 计算inertia簇内误差平方和
	sse.append(kmeans.inertia_)
x = range(1, 11)
plt.xlabel('K')
plt.ylabel('SSE')
plt.plot(x, sse, 'o-')
plt.show()

 
# 方法二：使用层次聚类

from scipy.cluster.hierarchy import dendrogram, ward
from sklearn.cluster import KMeans, AgglomerativeClustering
import matplotlib.pyplot as plt
model = AgglomerativeClustering(linkage='ward', n_clusters=3)
y = model.fit_predict(train_x)
print(y)

linkage_matrix = ward(train_x)
dendrogram(linkage_matrix)
plt.show() 
